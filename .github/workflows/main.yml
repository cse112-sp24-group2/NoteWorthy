name: CI
on: push

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # setup:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set up Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Cache dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
  #     - name: Install dependencies
  #       run: |
  #         npm install jest
  #         npm install --save-dev node-fetch
  #         npm install -D jest-environment-jsdom
  #         npm ci -l verbose
  #
  # lint:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Check linting and formatting
  #       run: |
  #         npm install
  #         npm run lint:check
  #
  # validate-html:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: HTML5 Validator
  #       uses: Cyb3r-Jak3/html5validator-action@v7.2.0
  #       with:
  #         root: source/
  #         css: true
  #         skip_git_check: true
  #
  # test:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Restore dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - name: Start server
  #       run: |
  #         cd source
  #         npm install
  #         npm run dev &
  #       env:
  #         CI: true
  #     - name: Run tests
  #       run: |
  #         npm install
  #         npm run test
  #       env:
  #         NODE_OPTIONS: --experimental-vm-modules
  #         CI: true
  #
  # lighthouse:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Restore dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - name: Run Google Lighthouse
  #       run: |
  #         npm install -g @lhci/cli@0.13.x
  #         lhci autorun
  #       env:
  #         LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  #
  # build-docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Install JSDocs
  #       run: npm i -g jsdoc && npm install -g jsdoc-tsimport-plugin
  #     - name: Build JSDocs
  #       run: jsdoc -c jsdoc.json
  #     - name: Upload GitHub Pages artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: './'
  #         name: jsdocs-artifact

  build:
    name: Build
    runs-on: ubuntu-latest
    # needs: [lint, validate-html, test, lighthouse, build-docs]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Specify your Node.js version
    - name: Install dependencies and build
      run: |
        cd source
        npm install
        npm run build
    - name: Upload production-ready build files
      uses: actions/upload-artifact@v3
      with:
        name: production-files
        path: ./source/dist
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: github-pages
          path: ./source/dist
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./source/dist

