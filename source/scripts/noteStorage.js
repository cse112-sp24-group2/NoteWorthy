const e="NotesDB",r="NotesOS";let n;function o(t){return new Promise((r,o)=>{var e;n?r(n):((e=t.open("NotesDB",1)).onupgradeneeded=e=>{(n=e.target.result).createObjectStore("NotesOS",{keyPath:"uuid",autoIncrement:!0}).createIndex("note_tags","tags",{unique:!1,multiEntry:!0})},e.onsuccess=e=>{n=e.target.result,r(n)},e.onerror=e=>{o(new Error("Error opening database! "+e.target.errorCode))})})}function t(n){return new Promise((r,o)=>{var e=n.transaction("NotesOS").objectStore("NotesOS");const t=[];e=e.openCursor();e.onsuccess=e=>{e=e.target.result;e?(t.push(e.value),e.continue()):r(t)},e.onerror=e=>{o(new Error("Error fetching notes from storage: "+e.target.errorCode))}})}function s(t,n){return new Promise((e,r)=>{const o=t.transaction("NotesOS").objectStore("NotesOS").get(n);o.onsuccess=()=>{e(o.result)},o.onerror=()=>{r(new Error(`Error fetching note with id ${n} from storage.`))}})}function u(t,n){return n.uuid?new Promise((e,r)=>{const o=t.transaction("NotesOS","readwrite").objectStore("NotesOS").put(n);o.onsuccess=()=>{console.log("Successfully saved note with uuid "+o.result),e(o.result)},o.onerror=()=>{r(new Error(`Error saving note with id ${n.uuid} to storage`))}}):new Promise((e,r)=>{const o=t.transaction("NotesOS","readwrite").objectStore("NotesOS").add(n);o.onsuccess=()=>{console.log("Successfully saved note with uuid "+o.result),console.log(o.result),e(o.result)},o.onerror=()=>{r(new Error("Error saving new note to storage"))}})}function c(t,n){return new Promise((e,r)=>{var o=t.transaction("NotesOS","readwrite").objectStore("NotesOS").delete(n.uuid);o.onsuccess=()=>{console.log("Successfully deleted note with uuid "+n.uuid),e()},o.onerror=()=>{r(new Error(`Error deleting note with id ${n.uuid} from storage`))}})}export{e as DBNAME,r as OBJECT_STORE_NAME,o as initializeDB,t as getNotesFromStorage,s as getNoteFromStorage,u as saveNoteToStorage,c as deleteNoteFromStorage};